{"version":3,"sources":["../src/measure-text.js"],"names":["measureText","font","text","x","i","length","chars","kerning","kernings","xadvance","splitLines","maxWidth","words","split","lines","currentLine","longestLine","forEach","word","line","join","push","measureTextHeight","common","lineHeight"],"mappings":";;;;;;;;;;;;;AAAO,SAASA,WAAT,CAAqBC,IAArB,EAA2BC,IAA3B,EAAiC;AACtC,MAAIC,CAAC,GAAG,CAAR;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACG,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,QAAIH,IAAI,CAACK,KAAL,CAAWJ,IAAI,CAACE,CAAD,CAAf,CAAJ,EAAyB;AACvB,UAAMG,OAAO,GACXN,IAAI,CAACO,QAAL,CAAcN,IAAI,CAACE,CAAD,CAAlB,KAA0BH,IAAI,CAACO,QAAL,CAAcN,IAAI,CAACE,CAAD,CAAlB,EAAuBF,IAAI,CAACE,CAAC,GAAG,CAAL,CAA3B,CAA1B,GACIH,IAAI,CAACO,QAAL,CAAcN,IAAI,CAACE,CAAD,CAAlB,EAAuBF,IAAI,CAACE,CAAC,GAAG,CAAL,CAA3B,CADJ,GAEI,CAHN;AAKAD,MAAAA,CAAC,IAAI,CAACF,IAAI,CAACK,KAAL,CAAWJ,IAAI,CAACE,CAAD,CAAf,EAAoBK,QAApB,IAAgC,CAAjC,IAAsCF,OAA3C;AACD;AACF;;AAED,SAAOJ,CAAP;AACD;;AAEM,SAASO,UAAT,CAAoBT,IAApB,EAA0BC,IAA1B,EAAgCS,QAAhC,EAA0C;AAC/C,MAAMC,KAAK,GAAGV,IAAI,CAACW,KAAL,CAAW,GAAX,CAAd;AACA,MAAMC,KAAK,GAAG,EAAd;AACA,MAAIC,WAAW,GAAG,EAAlB;AACA,MAAIC,WAAW,GAAG,CAAlB;AAEAJ,EAAAA,KAAK,CAACK,OAAN,CAAc,UAACC,IAAD,EAAU;AACtB,QAAMC,IAAI,GAAG,8CAAIJ,WAAJ,IAAiBG,IAAjB,GAAuBE,IAAvB,CAA4B,GAA5B,CAAb;AACA,QAAMf,MAAM,GAAGL,WAAW,CAACC,IAAD,EAAOkB,IAAP,CAA1B;;AAEA,QAAId,MAAM,IAAIM,QAAd,EAAwB;AACtB,UAAIN,MAAM,GAAGW,WAAb,EAA0B;AACxBA,QAAAA,WAAW,GAAGX,MAAd;AACD;;AAEDU,MAAAA,WAAW,CAACM,IAAZ,CAAiBH,IAAjB;AACD,KAND,MAMO;AACLJ,MAAAA,KAAK,CAACO,IAAN,CAAWN,WAAX;AACAA,MAAAA,WAAW,GAAG,CAACG,IAAD,CAAd;AACD;AACF,GAdD;AAgBAJ,EAAAA,KAAK,CAACO,IAAN,CAAWN,WAAX;AAEA,SAAO;AACLD,IAAAA,KAAK,EAALA,KADK;AAELE,IAAAA,WAAW,EAAXA;AAFK,GAAP;AAID;;AAEM,SAASM,iBAAT,CAA2BrB,IAA3B,EAAiCC,IAAjC,EAAuCS,QAAvC,EAAiD;AAAA,oBACpCD,UAAU,CAACT,IAAD,EAAOC,IAAP,EAAaS,QAAb,CAD0B;AAAA,MAC9CG,KAD8C,eAC9CA,KAD8C;;AAGtD,SAAOA,KAAK,CAACT,MAAN,GAAeJ,IAAI,CAACsB,MAAL,CAAYC,UAAlC;AACD","sourcesContent":["export function measureText(font, text) {\n  let x = 0;\n\n  for (let i = 0; i < text.length; i++) {\n    if (font.chars[text[i]]) {\n      const kerning =\n        font.kernings[text[i]] && font.kernings[text[i]][text[i + 1]]\n          ? font.kernings[text[i]][text[i + 1]]\n          : 0;\n\n      x += (font.chars[text[i]].xadvance || 0) + kerning;\n    }\n  }\n\n  return x;\n}\n\nexport function splitLines(font, text, maxWidth) {\n  const words = text.split(\" \");\n  const lines = [];\n  let currentLine = [];\n  let longestLine = 0;\n\n  words.forEach((word) => {\n    const line = [...currentLine, word].join(\" \");\n    const length = measureText(font, line);\n\n    if (length <= maxWidth) {\n      if (length > longestLine) {\n        longestLine = length;\n      }\n\n      currentLine.push(word);\n    } else {\n      lines.push(currentLine);\n      currentLine = [word];\n    }\n  });\n\n  lines.push(currentLine);\n\n  return {\n    lines,\n    longestLine,\n  };\n}\n\nexport function measureTextHeight(font, text, maxWidth) {\n  const { lines } = splitLines(font, text, maxWidth);\n\n  return lines.length * font.common.lineHeight;\n}\n"],"file":"measure-text.js"}